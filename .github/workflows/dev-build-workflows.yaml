name: DEV - Build 

on:
  workflow_dispatch:
  
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop

env:
  APP_NAME: prin-tutorial-frontend
  CONTAINER_REPOSITORY: "acrprintutorial001.azurecr.io"
  IMAGE_TAG: "0.0.1-SNAPSHOT"

jobs:
  unitest:
    name: UnitTest
    runs-on: ubuntu-latest
    environment: dev

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup node
      uses: actions/setup-node@v2
      with:
        node-version: '14'

    - name: Install dependencies
      run: npm install
  
    - name: Unit test
      run: npm run test:unit 

    - name: Upload Reports
      uses: actions/upload-artifact@v2
      with:
        name: Unit Test Results
        path: '${{ github.workspace }}/coverage/lcov-report/*'

  analyze:
      name: SAST CodeQL
      runs-on: ubuntu-latest
      permissions:
        actions: read
        contents: read
        security-events: write

      strategy:
        fail-fast: false
        matrix:
          language: [ 'javascript' ]
          # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python' ]
          # Learn more:
          # https://docs.github.com/en/free-pro-team@latest/github/finding-security-vulnerabilities-and-errors-in-your-code/configuring-code-scanning#changing-the-languages-that-are-analyzed

      steps:
      - name: Checkout code
        uses: actions/checkout@v2



      # Initializes the CodeQL tools for scanning.
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v1
        with:
          languages: ${{ matrix.language }}
          
      - name: Autobuild
        uses: github/codeql-action/autobuild@v1
      
      - name: Perform CodeQL Analysis
          uses: github/codeql-action/analyze@v1

  build:
      name: Build
      runs-on: ubuntu-latest
      environment: 
        name: dev
        url: https://github.com/[PrinLeowarn]/prin-tutorial-pipeline/actions/workflows/dev-tutorial-backend-deploy.yml
      needs: [unitest,analyze] # if on env sit don't use
  
  
  steps:
    - name: Checkout code
      uses: actions/checkout@v2


    - name: Build image
      id: docker_build
      uses: docker/build-push-action@v2
      with:
        context: .
        tags: ${{ env.CONTAINER_REPOSITORY }}/${{ env.APP_NAME }}:${{env.IMAGE_TAG}}

    - name: "ACR login"
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.CONTAINER_REPOSITORY }}
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}


    - name: Push image
      run: docker image push ${{ env.CONTAINER_REPOSITORY }}/${{ env.APP_NAME }}:${{env.IMAGE_TAG}}

    - name: Repository Dispatch
      uses: peter-evans/repository-dispatch@v1
      with:
        token: ${{ secrets.REPO_ACCESS_TOKEN }}
        repository: username/[name]-tutorial-pipeline
        event-type: name-tutorial-backend-cd-dev
        client-payload: '{"ref": "${{ github.ref }}", "sha": "${{ github.sha }}"}'











